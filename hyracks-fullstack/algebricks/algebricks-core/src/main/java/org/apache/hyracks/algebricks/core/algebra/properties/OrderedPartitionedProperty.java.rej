diff a/hyracks-fullstack/algebricks/algebricks-core/src/main/java/org/apache/hyracks/algebricks/core/algebra/properties/OrderedPartitionedProperty.java b/hyracks-fullstack/algebricks/algebricks-core/src/main/java/org/apache/hyracks/algebricks/core/algebra/properties/OrderedPartitionedProperty.java	(rejected hunks)
@@ -18,8 +18,6 @@
  */
 package org.apache.hyracks.algebricks.core.algebra.properties;
 
-import java.util.ArrayList;
-import java.util.Collection;
 import java.util.List;
 import java.util.Map;
 
@@ -27,32 +25,14 @@
 import org.apache.hyracks.algebricks.core.algebra.base.LogicalVariable;
 import org.apache.hyracks.dataflow.common.data.partition.range.RangeMap;
 
-public class OrderedPartitionedProperty implements IPartitioningProperty {
-
-    private final List<OrderColumn> orderColumns;
-    private final RangeMap rangeMap;
-    private INodeDomain domain;
+public class OrderedPartitionedProperty extends AbstractOrderedPartitionedProperty {
 
     public OrderedPartitionedProperty(List<OrderColumn> orderColumns, INodeDomain domain) {
-        this(orderColumns, domain, null);
+        super(orderColumns, domain);
     }
 
     public OrderedPartitionedProperty(List<OrderColumn> orderColumns, INodeDomain domain, RangeMap rangeMap) {
-        this.domain = domain;
-        this.orderColumns = orderColumns;
-        this.rangeMap = rangeMap;
-    }
-
-    public List<OrderColumn> getOrderColumns() {
-        return orderColumns;
-    }
-
-    public List<LogicalVariable> getColumns() {
-        ArrayList<LogicalVariable> cols = new ArrayList<>(orderColumns.size());
-        for (OrderColumn oc : orderColumns) {
-            cols.add(oc.getColumn());
-        }
-        return cols;
+        super(orderColumns, domain, rangeMap);
     }
 
     @Override
@@ -61,59 +41,16 @@
     }
 
     @Override
-    public String toString() {
-        return getPartitioningType().toString() + orderColumns + " domain:" + domain
-                + (rangeMap != null ? " range-map:" + rangeMap : "");
-    }
-
-    @Override
     public IPartitioningProperty normalize(Map<LogicalVariable, EquivalenceClass> equivalenceClasses,
             List<FunctionalDependency> fds) {
         List<OrderColumn> columns = PropertiesUtil.replaceOrderColumnsByEqClasses(orderColumns, equivalenceClasses);
         columns = PropertiesUtil.applyFDsToOrderColumns(columns, fds);
-        return new OrderedPartitionedProperty(columns, domain, rangeMap);
+        return newInstance(columns, domain, rangeMap);
     }
 
     @Override
-    public void getColumns(Collection<LogicalVariable> columns) {
-        for (OrderColumn oc : orderColumns) {
-            columns.add(oc.getColumn());
-        }
-    }
-
-    public RangeMap getRangeMap() {
-        return rangeMap;
-    }
-
-    @Override
-    public INodeDomain getNodeDomain() {
-        return domain;
-    }
-
-    @Override
-    public void setNodeDomain(INodeDomain domain) {
-        this.domain = domain;
-    }
-
-    @Override
-    public IPartitioningProperty substituteColumnVars(Map<LogicalVariable, LogicalVariable> varMap) {
-        boolean applied = false;
-        List<OrderColumn> newOrderColumns = new ArrayList<>(orderColumns.size());
-        for (OrderColumn orderColumn : orderColumns) {
-            LogicalVariable columnVar = orderColumn.getColumn();
-            LogicalVariable newColumnVar = varMap.get(columnVar);
-            if (newColumnVar != null) {
-                applied = true;
-            } else {
-                newColumnVar = columnVar;
-            }
-            newOrderColumns.add(new OrderColumn(newColumnVar, orderColumn.getOrder()));
-        }
-        return applied ? new OrderedPartitionedProperty(newOrderColumns, domain, rangeMap) : this;
-    }
-
-    @Override
-    public IPartitioningProperty clonePartitioningProperty() {
-        return new OrderedPartitionedProperty(new ArrayList<>(orderColumns), domain, rangeMap);
+    protected AbstractOrderedPartitionedProperty newInstance(List<OrderColumn> orderColumns, INodeDomain domain,
+            RangeMap rangeMap) {
+        return new OrderedPartitionedProperty(orderColumns, domain, rangeMap);
     }
 }
